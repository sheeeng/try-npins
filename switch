#!/usr/bin/env bash

# https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html
set -o pipefail # If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default.
set -o errexit  # set -e # Exit immediately if a pipeline, which may consist of a single simple command, a list, or a compound command returns a non-zero status.
set -o nounset  # set -u # Treat unset variables and parameters other than the special parameters ‘@’ or ‘*’, or array variables subscripted with ‘@’ or ‘*’, as an error when performing parameter expansion. An error message will be written to the standard error, and a non-interactive shell will exit.
# set -o xtrace  # set -x # Print a trace of simple commands, for commands, case commands, select commands, and arithmetic for commands and their arguments or associated word lists after they are expanded and before they are executed. The value of the PS4 variable is expanded and the resultant value is printed before the command and its expanded arguments.

# https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# shopt -s inherit_errexit # If set, command substitution inherits the value of the errexit option, instead of unsetting it in the subshell environment. This option is enabled when POSIX mode is enabled.

if [ -d ".git" ] || git rev-parse --git-dir > /dev/null 2>&1; then
  GIT_ROOT_DIRECTORY=$(git rev-parse --show-toplevel)
  echo "\${GIT_ROOT_DIRECTORY}: ${GIT_ROOT_DIRECTORY}"
fi

SCRIPT_DIRECTORY="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
echo "\${SCRIPT_DIRECTORY}: ${SCRIPT_DIRECTORY}"

# ----------------------------------------------------------------------

# https://stackoverflow.com/a/31397073
# mktemp --directory "${TMPDIR:-/tmp}/zombie.XXXXXXXXX"
TEMPORARY_DIRECTORY="$(mktemp --directory --tmpdir="${PWD}")"
echo "\${TEMPORARY_DIRECTORY}: ${TEMPORARY_DIRECTORY}"

function cleanUp {
  rm \
    -r \
    -v \
    "${TEMPORARY_DIRECTORY}"
}
trap cleanUp EXIT

# ----------------------------------------------------------------------

pushd "${SCRIPT_DIRECTORY}"
date -u +"%Y%m%dT%H%M%SZ"

# Check if the script is running as root.
if [ ${EUID:-0} -eq 0 ] || [ "$(id -u)" -eq 0 ]; then
  echo "This script requires non-root access."
  exit 42
fi


# assume that if there are no args, you want to switch to the configuration
cmd=${1:-switch}
# Only shift if there are arguments, else it fails.
if [ $# -gt 0 ]; then
  shift
fi



if [[ "$(uname)" == "Darwin" ]]; then
  echo "Running on macOS operating system."
  echo -e "\033[0;33m---- Switching ---------------------\033[0m"

  nixpkgs_pin=$(nix eval --raw -f npins/default.nix nixpkgs)
  nix_path="nixpkgs=${nixpkgs_pin}:nixos-config=${PWD}/configuration.nix"
  # sudo env NIX_PATH="${nix_path}" darwin-rebuild "$cmd" "$@"
  # darwin-rebuild "$cmd" "$@"
  nix-build '<darwin>' --attr darwin-rebuild

elif [[ "$(uname)" == "Linux" ]]; then
  echo "Running on Linux operating system."
  echo -e "\033[0;33m---- Switching ---------------------\033[0m"

  # Copied from https://github.com/ezemtsov/nixos-config/blob/3d5908c69245d31b1925cb0c5ef254357a70d643/nixos-switch file.
  nixpkgs_pin=$(nix eval --raw -f /etc/nixos/npins/default.nix nixpkgs)
  nix_path="nixpkgs=${nixpkgs_pin}:nixos-config=/etc/nixos/configuration.nix"
  # without --fast, nixos-rebuild will compile nix and use the compiled nix to
  # evaluate the config, wasting several seconds
  sudo env NIX_PATH="${nix_path}" nixos-rebuild "$cmd" --fast "$@"
else
  echo "Runnning on unrecognized $(uname) operating system."
  exit 1
fi
